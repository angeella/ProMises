R <-  array(NA, c(col,col, nsubj))
out <-foreach(i = c(1:nsubj)) %dopar% {
if(subj){
# GPASub(X[,,i], Q[,,i], k, ref_ds, scaling, reflection)
vMFP(X[,,i], k, Q[,,i], ref_ds, scaling, reflection)
}else{
#  GPASub(X[,,i], Q, k, ref_ds, scaling, reflection)
vMFP(X[,,i], k, Q, ref_ds, scaling, reflection)
}
}
out <-foreach(i = c(1:nsubj)) %dopar% {
if(subj){
# GPASub(X[,,i], Q[,,i], k, ref_ds, scaling, reflection)
vMFP(X[,,i], k, Q[,,i], ref_ds, scaling, reflection)
}else{
#  GPASub(X[,,i], Q, k, ref_ds, scaling, reflection)
vMFP(X[,,i], k, Q, ref_ds, scaling, reflection)
}
}
ref_ds
scaling
reflection
Q
k
X[,,i]
i = 1
X[,,i]
Q[,,i]
subj
Q
#  GPASub(X[,,i], Q, k, ref_ds, scaling, reflection)
vMFP(X[,,i], k, Q, ref_ds, scaling, reflection)
ref_ds
scaling
reflection
vMFP(X, k = 1, Q = matrix(rnorm(5*5),5,5), ref_ds = matrix(rnorm(5*5),5,5), scaling = TRUE, reflection = TRUE)
out = vMFP(X, k = 1, Q = matrix(rnorm(5*5),5,5), ref_ds = matrix(rnorm(5*5),5,5), scaling = TRUE, reflection = TRUE)
out = vMFP(X[,,i], k, Q, ref_ds, scaling, reflection)
X[,,1]
X[,,1][1]
scaling
reflection
ref_ds
Q
k
X[,,i]
if(is.null(Q)){ Q <- matrix(0, nrow = col, ncol = col) + 1
k <- 0
}
#  GPASub(X[,,i], Q, k, ref_ds, scaling, reflection)
vMFP(X[,,i], k, Q, ref_ds, scaling, reflection)
Q
Q <- matrix(0, nrow = col, ncol = col) + 1
Q
Q <- matrix(1, nrow = col, ncol = col)
k <- 0
#  GPASub(X[,,i], Q, k, ref_ds, scaling, reflection)
vMFP(X[,,i], k, Q, ref_ds, scaling, reflection)
#  GPASub(X[,,i], Q, k, ref_ds, scaling, reflection)
vMFP(X = X[,,i], k = k, Q = Q, ref_ds = ref_ds, scaling = scaling, reflection = reflection)
data = X[,,1]
vMFP(data, k, Q, ref_ds, scaling, reflection)
X <- matrix(rnorm(5*5),5,5)
out<- vMFP(X, k = 1, Q = matrix(rnorm(5*5),5,5), ref_ds = matrix(rnorm(5*5),5,5), scaling = TRUE, reflection = TRUE)
X <- matrix(rnorm(5*5),5,5)
out<- vMFP(X, k = 1, Q = matrix(rnorm(5*5),5,5), ref_ds = matrix(rnorm(5*5),5,5), scaling = TRUE, reflection = TRUE)
X
out<- vMFP(X, k = 1, Q = matrix(rnorm(5*5),5,5), ref_ds = matrix(rnorm(5*5),5,5), scaling = TRUE, reflection = TRUE)
X <- matrix(rnorm(5*5),5,5)
out<- vMFP(X, k = 1, Q = matrix(rnorm(5*5),5,5), ref_ds = matrix(rnorm(5*5),5,5), scaling = TRUE, reflection = TRUE)
library(vMFPmodel)
X <- matrix(rnorm(5*5),5,5)
out<- vMFP(X, k = 1, Q = matrix(rnorm(5*5),5,5), ref_ds = matrix(rnorm(5*5),5,5), scaling = TRUE, reflection = TRUE)
str(out)
out$Xest
data<- array(rnorm(3*4*5), dim = c(3,4,5))
maxIt <- 1
t <- 1
k <- 1
scaling <- TRUE
reflection <- TRUE
subj <- FALSE
row <- dim(data)[1]
col <- dim(data)[2]
nsubj <- dim(data)[3]
count = 1
dist = vector()
dist[1] <- Inf
M <- aaply(data, c(1,2), mean)
datas_centered <- aaply(data, 3, function(x) x - M)
X <- aaply(datas_centered, 1, function(x) x/norm(x,type="F"))
X<-aperm(X,c(2,3,1))
Q <- matrix(0, nrow = col, ncol = col)
ref_ds <- M
Xest <-  array(NA, dim(X))
R <-  array(NA, c(col,col, nsubj))
out <-foreach(i = c(1:nsubj)) %dopar% {
if(subj){
# GPASub(X[,,i], Q[,,i], k, ref_ds, scaling, reflection)
vMFP(X[,,i], k, Q[,,i], ref_ds, scaling, reflection)
}else{
#  GPASub(X[,,i], Q, k, ref_ds, scaling, reflection)
vMFP(X[,,i], k, Q, ref_ds, scaling, reflection)
}
}
out
count <- count + 1
Xest = array(unlist(sapply(c(1:nsubj), function(x) out[[x]]$Xest,simplify = F)), dim = dim(X))
Xest
R = array(unlist(sapply(c(1:nsubj), function(x) out[[x]]$R,simplify = F)), dim = c(col,col,nsubj))
ref_ds_old = ref_ds
ref_ds = aaply(Xest, c(1,2), mean)
dist[count] <- norm(ref_ds-ref_ds_old,type="F")
out <-vMFPmodel(data, maxIt, t, k, Q, ref_ds, scaling, reflection, subj, centered = TRUE)
out
data<- array(rnorm(3*4*5), dim = c(3,4,5))
out <-vMFPmodel(data, maxIt = 1, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = TRUE)
data<- array(rnorm(230*400*5), dim = c(3,4,5))
out <-vMFPmodel(data, maxIt = 1, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = TRUE)
data<- array(rnorm(230*40000*5), dim = c(230,40000,5))
out <-vMFPmodel(data, maxIt = 1, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = TRUE)
out$Xest[1]
str(out)
data<- array(rnorm(230*230*5), dim = c(230,230,5))
system.time(out <-vMFPmodel(data, maxIt = 1, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = TRUE))
require(ARIpermutation)
require(vMFPmodel)
mask_STG <- RNifti::readNifti("C:/Users/Angela Andreella/Documents/Thesis_Doc/Hyperaligment/Computation/AuditoryData/Pvalues/STG/mask_Superior_Temporal_Gyrus.nii.gz")
sub_ids <- sapply(c(21:24),function(x) paste0(0,x))
img <- array(NA, c(sum(mask_STG==1), 310, length(sub_ids)))
for (sid in 1:length(sub_ids)) {
wb <- RNifti::readNifti(paste0("C:/Users/Angela Andreella/Documents/Thesis_Doc/Hyperaligment/Computation/AuditoryData/Data_preprocess_FSL/sub-", sub_ids[sid],".feat.nii.gz"))
voxel <- dim(wb)[1] * dim(wb)[2] * dim(wb)[3]
img[,,sid] <- array(wb, dim = c(voxel, 310))[which(mask_STG==1),]
}
data <- img
str(data)
system.time(out <-vMFPmodel(data, maxIt = 1, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = TRUE))
power.t.test(n = 10,sig.level = 0.05)
power.t.test(n = 10,sig.level = 0.05,delta = 0)
alpha <- seq(0,1,0.05)
o <- list()
for(i in 1:length(alpha)){
o[[i] <-power.t.test(n = 10,sig.level = alpha[i],delta = 0)
}
i = 1
a = power.t.test(n = 10,sig.level = alpha[i],delta = 0)
for(i in c(1:length(alpha))){
o[[i] <-power.t.test(n = 10,sig.level = alpha[i],delta = 0)$power
}
for(i in c(1:length(alpha))){
o[[i]] <-power.t.test(n = 10,sig.level = alpha[i],delta = 0)$power
}
plot(alpha, unlist(o))
alpha <- seq(0,1,0.005)
o <- list()
for(i in c(1:length(alpha))){
o[[i]] <-power.t.test(n = 10,sig.level = alpha[i],delta = 0)$power
}
plot(alpha, unlist(o))
alpha <- seq(0,1,0.005)
o <- list()
for(i in c(1:length(alpha))){
o[[i]] <-power.t.test(n = 10,sig.level = alpha[i],delta = 1)$power
}
plot(alpha, unlist(o))
alpha <- seq(0,1,0.005)
o <- list()
for(i in c(1:length(alpha))){
o[[i]] <-power.t.test(n = 10,sig.level = alpha[i],delta = 0)$power
}
plot(alpha, unlist(o))
alpha <- seq(0,1,0.005)
o <- list()
for(i in c(1:length(alpha))){
o[[i]] <-power.t.test(n = 10,sig.level = alpha[i],delta = 60)$power
}
plot(alpha, unlist(o))
alpha <- seq(0,1,0.005)
o <- list()
for(i in c(1:length(alpha))){
o[[i]] <-power.t.test(n = 10,sig.level = alpha[i],delta = 0)$power
}
plot(alpha, unlist(o))
alpha <- seq(0,1,0.005)
o <- list()
for(i in c(1:length(alpha))){
o[[i]] <-power.t.test(n = 10,sig.level = alpha[i],delta = 3)$power
}
plot(alpha, unlist(o))
alpha <- seq(0,1,0.005)
o <- list()
for(i in c(1:length(alpha))){
o[[i]] <-power.t.test(n = 10,sig.level = alpha[i],delta = 10)$power
}
plot(alpha, unlist(o))
alpha <- seq(0,1,0.005)
o <- list()
for(i in c(1:length(alpha))){
o[[i]] <-power.t.test(n = 10,sig.level = alpha[i],delta = 10)$power
}
plot(alpha, unlist(o))
alpha <- seq(0,1,0.005)
o <- list()
for(i in c(1:length(alpha))){
o[[i]] <-power.t.test(n = 10,sig.level = alpha[i],delta = 100)$power
}
plot(alpha, unlist(o))
alpha <- seq(0,1,0.005)
o <- list()
for(i in c(1:length(alpha))){
o[[i]] <-power.t.test(n = 10,sig.level = alpha[i],delta = 1)$power
}
plot(alpha, unlist(o))
alpha <- seq(0,1,0.005)
o <- list()
for(i in c(1:length(alpha))){
o[[i]] <-power.t.test(n = 10,sig.level = alpha[i],delta = 6)$power
}
plot(alpha, unlist(o))
power.t.test(n = 10,sig.level = 0,delta = 0)
power.t.test(n = 10,sig.level = 1,delta = 0)
power.t.test(n = 10,sig.level = 1,delta = 10)
power.t.test(n = 10,sig.level = 0,delta = 10)
power.t.test(n = 10,sig.level = 0,delta = 100)
power.t.test(n = 10,sig.level = 0,delta = 0)
library(diffusionMap)
install.packages("diffusionMap")
library(diffusionMap)
650*3
C <- matrix(rnorm(4*4), 4, 4)
alpha <- 4
E <- matrix(rnorm(4*10), 4, 10)
C <- matrix(rnorm(4*4), 4, 4)
alpha <- 4
E <- matrix(rnorm(4*10), 4, 10)
R <- matrix(rnorm(10*10), 10, 10)
first <- C %*% alpha %*% E %*% R
first <- C * alpha %*% E %*% R
first <- C * alpha * E %*% R
R
alpha <- as.vector(4)
alpha
first <- C %*% alpha %*% E %*% R
E %*% R
alpha * E %*% R
C %*% alpha * E %*% R
first <- C * alpha * E %*% R
C * alpha
C * alpha * E
alpha <- as.vector(4)
alpha
alpha <- c(4)
first <- C * alpha * E %*% R
C <- matrix(rnorm(4*4), 4, 4)
alpha <- c(4)
E <- matrix(rnorm(4*10), 4, 10)
R <- matrix(rnorm(10*10), 10, 10)
alpha * E %*% R
C * alpha
dim(C * alpha)
dim(E)
first <- C * alpha %*% E %*% R
C * alpha
first <- C * alpha
X <- C * alpha
first <- X %*% E %*% R
X<- alpha * C
sec <- X %*% E %*% R
sum(sec==first)
sum(sec!=first)
X <- matrix(rnorm(5*5),5,5)
out<- vMFP(X, k = 1, Q = matrix(rnorm(5*5),5,5), ref_ds = matrix(rnorm(5*5),5,5), scaling = TRUE, reflection = TRUE)
library(vMFPmodel)
library(vMFPmodelR)
library(vMFPmodel)
library(vMFPmodelR)
install.packages("Rtools")
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
warnings()
warnings()
roxygen2::roxygenise()
library(devtools)
devtools::load_all(recompile = TRUE)
data<- array(rnorm(23*23*5), dim = c(23,23,5))
system.time(out <-vMFPmodel(data, maxIt = 1, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
out <- svdC(data[,,1])
system.time(out <-vMFPmodel(data, maxIt = 1, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
system.time(out <-vMFPmodel(data, maxIt = 1, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
data<- array(rnorm(100*100*4), dim = c(100*100*4))
system.time(out <-vMFPmodel(data, maxIt = 1, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
data<- array(rnorm(100*100*4), dim = c(100,100,4))
system.time(out <-vMFPmodel(data, maxIt = 1, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
data<- array(rnorm(23*23*5), dim = c(23,23,5))
system.time(out <-vMFPmodel(data, maxIt = 1, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
cat(2)
cat(3)
vMFPmodel <- function(data, maxIt=10, t =.001, k = 0, Q = NULL, ref_ds = NULL, scaling = T, reflection= T, subj= F, centered = T){
if(!is.array(data)){warnings("Please insert an array of matrices with dimension time points - voxels")}
row <- dim(data)[1]
col <- dim(data)[2]
nsubj <- dim(data)[3]
count = 1
dist = vector()
dist[1] <- Inf
M <- aaply(data, c(1,2), mean)
if(centered){
datas_centered <- aaply(data, 3, function(x) x - M)
X <- aaply(datas_centered, 1, function(x) x/norm(x,type="F"))
X<-aperm(X,c(2,3,1))
}else{
X<- data
}
if(is.null(Q)){ Q <- matrix(0, nrow = col, ncol = col)
}
if(is.null(ref_ds)){
ref_ds <- M
}
while(dist[count] > t & count < maxIt){
cat(count)
Xest <-  array(NA, dim(X))
R <-  array(NA, c(col,col, nsubj))
out <-foreach(i = c(1:nsubj)) %dopar% {
if(subj){
cat(2)
# GPASub(X[,,i], Q[,,i], k, ref_ds, scaling, reflection)
vMFP(X[,,i], k, Q[,,i], ref_ds, scaling, reflection)
}else{
#  GPASub(X[,,i], Q, k, ref_ds, scaling, reflection)
vMFP(X[,,i], k, Q, ref_ds, scaling, reflection)
}
}
count <- count + 1
cat(3)
Xest = array(unlist(sapply(c(1:nsubj), function(x) out[[x]]$Xest,simplify = F)), dim = dim(X))
R = array(unlist(sapply(c(1:nsubj), function(x) out[[x]]$R,simplify = F)), dim = c(col,col,nsubj))
ref_ds_old = ref_ds
ref_ds = aaply(Xest, c(1,2), mean)
dist[count] <- norm(ref_ds-ref_ds_old,type="F")
}
return(list(Xest = Xest, R = R, dist = dist, count = count))
}
system.time(out <-vMFPmodel(data, maxIt = 1, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
devtools::load_all(path="C:\Users\corbe\OneDrive\Documenti\GitHub\vMFPmodelR")
devtools::load_all(path="C:/Users\corbe\OneDrive\Documenti\GitHub\vMFPmodelR")
devtools::load_all(path="C:/Users/corbe/OneDrive/Documenti/GitHub/vMFPmodelR")
system.time(out <-vMFPmodel(data, maxIt = 1, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
devtools::load_all(path="C:/Users/corbe/OneDrive/Documenti/GitHub/vMFPmodelR")
system.time(out <-vMFPmodel(data, maxIt = 1, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
warnings()
rm(list = c("vMFPmodel"))
devtools::load_all(path="C:/Users/corbe/OneDrive/Documenti/GitHub/vMFPmodelR")
system.time(out <-vMFPmodel(data, maxIt = 1, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
devtools::load_all(path="C:/Users/corbe/OneDrive/Documenti/GitHub/vMFPmodelR")
system.time(out <-vMFPmodel(data, maxIt = 1, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
devtools::load_all(path="C:/Users/corbe/OneDrive/Documenti/GitHub/vMFPmodelR")
system.time(out <-vMFPmodel(data, maxIt = 1, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
devtools::load_all(path="C:/Users/corbe/OneDrive/Documenti/GitHub/vMFPmodelR")
system.time(out <-vMFPmodel(data, maxIt = 1, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
devtools::load_all(path="C:/Users/corbe/OneDrive/Documenti/GitHub/vMFPmodelR")
system.time(out <-vMFPmodel(data, maxIt = 1, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
devtools::load_all(path="C:/Users/corbe/OneDrive/Documenti/GitHub/vMFPmodelR")
system.time(out <-vMFPmodel(data, maxIt = 1, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
devtools::load_all(path="C:/Users/corbe/OneDrive/Documenti/GitHub/vMFPmodelR")
system.time(out <-vMFPmodel(data, maxIt = 1, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
devtools::load_all(path="C:/Users/corbe/OneDrive/Documenti/GitHub/vMFPmodelR")
system.time(out <-vMFPmodel(data, maxIt = 1, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
devtools::load_all(path="C:/Users/corbe/OneDrive/Documenti/GitHub/vMFPmodelR")
system.time(out <-vMFPmodel(data, maxIt = 1, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
system.time(out <-vMFPmodel(data, maxIt = 5, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
system.time(out <-vMFPmodel(data, maxIt = 1, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
system.time(out <-vMFPmodel(data, maxIt = 2, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
row <- dim(data)[1]
col <- dim(data)[2]
nsubj <- dim(data)[3]
count = 1
dist = vector()
dist[1] <- Inf
M <- aaply(data, c(1,2), mean)
X<- data
Q <- matrix(0, nrow = col, ncol = col)
ref_ds <- M
Xest <-  array(NA, dim(X))
R <-  array(NA, c(col,col, nsubj))
out <-foreach(i = c(1:nsubj)) %dopar% {
#  GPASub(X[,,i], Q, k, ref_ds, scaling, reflection)
vMFP(X[,,i], Q, k, ref_ds, scaling, reflection)
}
out <-foreach(i = c(1:nsubj)) %dopar% {
#  GPASub(X[,,i], Q, k, ref_ds, scaling, reflection)
vMFP(X[,,i], Q, k=1, ref_ds, scaling=TRUE, reflection=TRUE)
}
data[,,1]
vMFP(data[,,1],Q=NULL, k=1 )
vMFP(data[,,1],Q=NULL, k=1, ref_ds=M )
out <- svdC(data[,,1])
t(out$V)
vMFP(data[,,1],Q=NULL, k=1, ref_ds=M )
out$d
devtools::load_all(path="C:/Users/corbe/OneDrive/Documenti/GitHub/vMFPmodelR")
vMFP(data[,,1],Q=NULL, k=1, ref_ds=M )
system.time(out <-vMFPmodel(data, maxIt = 2, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
system.time(out <-vMFPmodel(data, maxIt = 10, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
head(out$Xest)
out$Xest[1:6,1:6]
out$Xest[1:6,1:6,1]
system.time(out <-vMFPmodel(data, maxIt = 2, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
out$Xest[1:6,1:6,1]
a <- matrix(rnorm(1000*1000),ncol=1000)
system.time(svdC(a))
devtools::load_all(path="C:/Users/corbe/OneDrive/Documenti/GitHub/vMFPmodelR")
data<- array(rnorm(23*23*5), dim = c(23,23,5))
system.time(out <-vMFPmodel(data, maxIt = 2, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
system.time(out <-vMFPmodel(data, maxIt = 10, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
data<- array(rnorm(100*100*5), dim = c(100*100,5))
data<- array(rnorm(100*100*5), dim = c(100,100,5))
system.time(out <-vMFPmodel(data, maxIt = 10, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
data<- array(rnorm(1000*1000*4), dim = c(1000,1000,4))
system.time(out <-vMFPmodel(data, maxIt = 10, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
data<- array(rnorm(100*30*4), dim = c(100,30,4))
system.time(out <-vMFPmodel(data, maxIt = 10, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
getwd()
load("C:/Users/corbe/OneDrive/Documenti/uni/TesiMagistrale/reduced.RData")
load("C:/Users/corbe/OneDrive/Documenti/uni/TesiMagistrale/vMFP/reduced.RData")
logcounts(sce_151507) <- as.matrix(logcounts(sce_151507))
logcounts(sce_151508) <- as.matrix(logcounts(sce_151508))
logcounts(sce_151509) <- as.matrix(logcounts(sce_151509))
logcounts(sce_151510) <- as.matrix(logcounts(sce_151510))
library(abind)
mat <- abind(logcounts(sce_151507),logcounts(sce_151508),
logcounts(sce_151509),logcounts(sce_151510), along=3)
system.time(out <-vMFPmodel(mat, maxIt = 5, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
system.time(out <-vMFPmodel(data, maxIt = 10, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
devtools::load_all(path="C:/Users/corbe/OneDrive/Documenti/GitHub/vMFPmodelR")
system.time(out <-vMFPmodel(data, maxIt = 10, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
system.time(out <-vMFPmodel(mat, maxIt = 5, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
dist
out$dist
save(out, "prova.RData")
save(out, file="prova.RData")
devtools::load_all(path="C:/Users/corbe/OneDrive/Documenti/GitHub/vMFPmodelR")
data<- array(rnorm(100*30*4), dim = c(100,30,4))
system.time(out1 <-vMFPmodel(data, maxIt = 10, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
devtools::load_all(path="C:/Users/corbe/OneDrive/Documenti/GitHub/vMFPmodelR")
system.time(out2 <-vMFPmodel(data, maxIt = 10, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
system.time(out3 <-vMFPmodel(mat, maxIt = 5, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
system.time(out <-vMFPmodel(data, maxIt = 10, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
roxygen2::roxigenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
svdC(data)
data<- array(rnorm(23*23*5), dim = c(23,23,5))
svdC(data[,,1])
data<- array(rnorm(23*23*5), dim = c(23,23,5))
system.time(out <-vMFPmodel(data, maxIt = 10, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
library(vMFPmodelR)
system.time(out <-vMFPmodel(data, maxIt = 10, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
vMFPmodelR:::svdC(data[,,1])
load("C:/Users/corbe/OneDrive/Documenti/uni/TesiMagistrale/vMFP/reduced.RData")
sce_151507
sce_151507$pixel[1:10]
sce_151508$pixel[1:10]
sce_151509$pixel[1:10]
sce_151510$pixel[1:10]
sce_151507$pixel[100:110]
sce_151508$pixel[100:110]
sce_151509$pixel[100:110]
sce_151510$pixel[100:110]
sce_151507$pixel[3900:3910]
sce_151508$pixel[3900:3910]
sce_151509$pixel[3900:3910]
sce_151510$pixel[3900:3910]
?dist
X <- rbind(sce_151507$row, sce_151507$col)
X <- cbind(sce_151507$row, sce_151507$col)
X1 <- cbind(sce_151508$row, sce_151508$col)
head(X1)
head(X)
Q <- dist(X)
dim(Q)
X1 <- cbind(rnorm(10),rnorm(10))
Q1 <- dist(X1)
Q <- dist(X)$dist
Q <- dist(X)
dim(Q)
Q
Q$class
Q$Size
Q <- as.matrix(dist(X))
dim(Q)
logcounts(sce_151507) <- as.matrix(logcounts(sce_151507))
logcounts(sce_151508) <- as.matrix(logcounts(sce_151508))
logcounts(sce_151509) <- as.matrix(logcounts(sce_151509))
logcounts(sce_151510) <- as.matrix(logcounts(sce_151510))
library(abind)
mat <- abind(logcounts(sce_151507),logcounts(sce_151508),
logcounts(sce_151509),logcounts(sce_151510), along=3)
Q[1:10,1:10]
system.time(out <-vMFPmodel(mat, maxIt = 10, Q = Q t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
system.time(out <-vMFPmodel(mat, maxIt = 10, Q = Q, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
library(vMFPmodelR)
system.time(out <-vMFPmodel(mat, maxIt = 10, Q = Q, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
Q1 <- exp(-Q)
Q1[1:10,1:10]
summary(Q1)
dim(Q1)
system.time(out <-vMFPmodel(mat, maxIt = 10, Q = Q1, t = 1, k = 1, scaling = TRUE, reflection = TRUE, subj = FALSE, centered = FALSE))
out$dist
save(out, file="out.RData")

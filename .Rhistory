#' @param scaling Flag to apply scaling transformation
#' @param reflection Flag to apply reflection transformation
#' @author Angela Andreella
#' @return Returns list of matrices
#' @export
#' @import svds rARPACK
#' @import Diagonal Matrix
#'
GPASub <- function(X, Q = NULL, k, ref_ds, scaling = TRUE, reflection = TRUE){
nc <- dim(X)[2]
if(is.null(Q)){ Q <- matrix(0, nrow = nc, ncol = nc)
}
#Put transposes to save memory.
out <- svds(t(t(ref_ds) %*% X + k * t(Q)))
s <- out$d
U <- out$u
Vt <- out$v
if(!reflection){
s_new <- Diagonal(n=length(s), x=1)
s_new[nc,nc] <- sign(det(U %*% Vt))
Tr <- (U %*% s_new) %*% Vt
scale <- sum(s_new * s)
}else{
Tr <-  U %*% Vt
scale <-  sum(s)
}
R = Tr
if(!scaling){
Xest <- X %*% R
}else{
Xest <- X %*% R * scale
}
return(list(Xest = Xest, R = R))
}
foreach(i = c(1:nsubj)) %dopar% {
if(subj){
out <-  GPASub(X[,,i], Q[,,i], k, ref_ds, scaling, reflection)
}else{
out <-  GPASub(X[,,i], Q, k, ref_ds, scaling, reflection)
}
}
k
out <-  GPASub(X[,,i], Q, k, ref_ds, scaling, reflection)
#' @title Generalized Procrustes Analysis with prior
#' @description perform Generalized Procrustes Analysis with prior
#' @usage GPASub(X, Q = NULL, k, ref_ds, scaling = TRUE, reflection = TRUE)
#' @param X data, i.e., list of matrices with dimension time points - voxels
#' @param Q maximum number of iteration
#' @param k value of the concentration parameter of the prior distribution
#' @param ref_ds starting matrix to align
#' @param scaling Flag to apply scaling transformation
#' @param reflection Flag to apply reflection transformation
#' @author Angela Andreella
#' @return Returns list of matrices
#' @export
#' @import svds rARPACK
#' @import Diagonal Matrix
#'
GPASub <- function(X, Q = NULL, k, ref_ds, scaling = TRUE, reflection = TRUE){
nc <- dim(X)[2]
if(is.null(Q)){ Q <- matrix(0, nrow = nc, ncol = nc)
}
#Put transposes to save memory.
out <- svd(t(t(ref_ds) %*% X + k * t(Q)))
s <- out$d
U <- out$u
Vt <- out$v
if(!reflection){
s_new <- Diagonal(n=length(s), x=1)
s_new[nc,nc] <- sign(det(U %*% Vt))
Tr <- (U %*% s_new) %*% Vt
scale <- sum(s_new * s)
}else{
Tr <-  U %*% Vt
scale <-  sum(s)
}
R = Tr
if(!scaling){
Xest <- X %*% R
}else{
Xest <- X %*% R * scale
}
return(list(Xest = Xest, R = R))
}
out <-  GPASub(X[,,i], Q[,,i], k, ref_ds, scaling, reflection)
out
foreach(i = c(1:nsubj)) %dopar% {
if(subj){
out <-  GPASub(X[,,i], Q[,,i], k, ref_ds, scaling, reflection)
}else{
out <-  GPASub(X[,,i], Q, k, ref_ds, scaling, reflection)
}
}
foreach(i = c(1:nsubj),.combine = 'c') %dopar% {
if(subj){
out <-  GPASub(X[,,i], Q[,,i], k, ref_ds, scaling, reflection)
}else{
out <-  GPASub(X[,,i], Q, k, ref_ds, scaling, reflection)
}
}
out
foreach(i = c(1:nsubj),.combine = 'c') %dopar% {
if(subj){
out <-  GPASub(X[,,i], Q[,,i], k, ref_ds, scaling, reflection)
}else{
out <-  GPASub(X[,,i], Q, k, ref_ds, scaling, reflection)
}
}
out <- list()
foreach(i = c(1:nsubj)) %dopar% {
if(subj){
out[[i]] <-  GPASub(X[,,i], Q[,,i], k, ref_ds, scaling, reflection)
}else{
out[[i]] <-  GPASub(X[,,i], Q, k, ref_ds, scaling, reflection)
}
}
out
out <-foreach(i = c(1:nsubj)) %dopar% {
if(subj){
GPASub(X[,,i], Q[,,i], k, ref_ds, scaling, reflection)
}else{
GPASub(X[,,i], Q, k, ref_ds, scaling, reflection)
}
}
out
out$Xest
Xest = sappy(c(1:nsubj), function(x) out[[x]]$Xest)
Xest = sapply(c(1:nsubj), function(x) out[[x]]$Xest)
Xest
out[[x]]$Xest
x = 1
out[[x]]$Xest
Xest = sapply(c(1:nsubj), function(x) out[[x]]$Xest,simplify = F)
Xest
Xest = array(unlist(sapply(c(1:nsubj), function(x) out[[x]]$Xest,simplify = F)), dim = dim(X))
Xest
R = array(unlist(sapply(c(1:nsubj), function(x) out[[x]]$R,simplify = F)), dim = c(ncol,ncol,nsubj))
R
library(vMFPmodel)
library(vMFPmodel)
data <- array(rnorm(3*4*5), dim = c(3,4,5))
maxIt <- 2
t <- 5
k <- 1
Q <- NULL
ref_ds <- NULL
scaling <- TRUE
reflection <- TRUE
subj <- FALSE
out <-vMFPmodel(data, maxIt, t, k, Q, ref_ds, scaling, reflection, subj)
row <- dim(data)[1]
col <- dim(data)[2]
nsubj <- dim(data)[3]
count = 1
dist = vector()
dist[1] <- Inf
M <- aaply(data, c(1,2), mean)
datas_centered <- aaply(data, 3, function(x) x - M)
X <- aaply(datas_centered, 1, function(x) x/norm(x,type="F"))
X<-aperm(X,c(2,3,1))
if(is.null(ref_ds)){
ref_ds <- M
}
while(dist[count] > t & count < maxIt){
Xest <-  array(NA, dim(X))
R <-  array(NA, c(col,col, nsubj))
out <-foreach(i = c(1:nsubj)) %dopar% {
if(subj){
GPASub(X[,,i], Q[,,i], k, ref_ds, scaling, reflection)
}else{
GPASub(X[,,i], Q, k, ref_ds, scaling, reflection)
}
}
count <- count + 1
Xest = array(unlist(sapply(c(1:nsubj), function(x) out[[x]]$Xest,simplify = F)), dim = dim(X))
R = array(unlist(sapply(c(1:nsubj), function(x) out[[x]]$R,simplify = F)), dim = c(ncol,ncol,nsubj))
ref_ds_old = ref_ds
ref_ds = aaply(Xest, c(1,2), mean)
dist[count] <- norm(ref_ds-ref_ds_old,type="F")
}
Xest
list(Xest = Xest, R = R, dist = dist, count = count)
row <- dim(data)[1]
col <- dim(data)[2]
nsubj <- dim(data)[3]
count = 1
dist = vector()
dist[1] <- Inf
M <- aaply(data, c(1,2), mean)
datas_centered <- aaply(data, 3, function(x) x - M)
X <- aaply(datas_centered, 1, function(x) x/norm(x,type="F"))
X<-aperm(X,c(2,3,1))
if(is.null(ref_ds)){
ref_ds <- M
}
Xest <-  array(NA, dim(X))
R <-  array(NA, c(col,col, nsubj))
out <-foreach(i = c(1:nsubj)) %dopar% {
if(subj){
GPASub(X[,,i], Q[,,i], k, ref_ds, scaling, reflection)
}else{
GPASub(X[,,i], Q, k, ref_ds, scaling, reflection)
}
}
count <- count + 1
Xest = array(unlist(sapply(c(1:nsubj), function(x) out[[x]]$Xest,simplify = F)), dim = dim(X))
R = array(unlist(sapply(c(1:nsubj), function(x) out[[x]]$R,simplify = F)), dim = c(ncol,ncol,nsubj))
ref_ds_old = ref_ds
ref_ds = aaply(Xest, c(1,2), mean)
dist[count] <- norm(ref_ds-ref_ds_old,type="F")
out <-vMFPmodel(data, maxIt, t, k, Q, ref_ds, scaling, reflection, subj)
R
#' @title von Mises Fisher Procrustes model
#' @description perform the functional alignment using the von Mises Fisher Procrustes model
#' @usage vMFPmodel(data, maxIt, t, k, Q, ref_ds, scaling, reflection, subj)
#' @param data data, i.e., array of matrices with dimension time points - voxels
#' @param maxIt maximum number of iteration
#' @param t the threshold value to be reached as the minimum relative reduction between the matrices
#' @param k value of the concentration parameter of the prior distribution
#' @param Q value of the location parameter of the prior distribution. It has dimension voxels x voxels, it could be not symmetric.
#' @param ref_ds starting matrix to align
#' @param scaling Flag to apply scaling transformation
#' @param reflection Flag to apply reflection transformation
#' @param subj Flag if each subject has his/her own set of voxel after voxel selection step
#' @author Angela Andreella
#' @return Returns list of matrices
#' @export
#' @import aaply plyr
#' @import foreach foreach
#' @import %dopar% foreach
vMFPmodel <- function(data, maxIt, t, k, Q, ref_ds, scaling, reflection, subj){
row <- dim(data)[1]
col <- dim(data)[2]
nsubj <- dim(data)[3]
count = 1
dist = vector()
dist[1] <- Inf
M <- aaply(data, c(1,2), mean)
datas_centered <- aaply(data, 3, function(x) x - M)
X <- aaply(datas_centered, 1, function(x) x/norm(x,type="F"))
X<-aperm(X,c(2,3,1))
if(is.null(ref_ds)){
ref_ds <- M
}
while(dist[count] > t & count < maxIt){
Xest <-  array(NA, dim(X))
R <-  array(NA, c(col,col, nsubj))
out <-foreach(i = c(1:nsubj)) %dopar% {
if(subj){
GPASub(X[,,i], Q[,,i], k, ref_ds, scaling, reflection)
}else{
GPASub(X[,,i], Q, k, ref_ds, scaling, reflection)
}
}
count <- count + 1
Xest = array(unlist(sapply(c(1:nsubj), function(x) out[[x]]$Xest,simplify = F)), dim = dim(X))
R = array(unlist(sapply(c(1:nsubj), function(x) out[[x]]$R,simplify = F)), dim = c(col,col,nsubj))
ref_ds_old = ref_ds
ref_ds = aaply(Xest, c(1,2), mean)
dist[count] <- norm(ref_ds-ref_ds_old,type="F")
}
return(list(Xest = Xest, R = R, dist = dist, count = count))
}
out <-vMFPmodel(data, maxIt, t, k, Q, ref_ds, scaling, reflection, subj)
out
require(ARIpermutation)
require(vMFPmodel)
copes <- list()
sub_ids <- sapply(c(21:40),function(x) paste0(0,x))
for (sid in 1:length(sub_ids)) {
copes[[sid]] <- RNifti::readNifti(system.file("extdata/AuditoryData", paste0("/sub-", sub_ids[sid] , ".nii.gz"), package = "ARIpermutation"))
}
img_dims <- c(91, 109, 91)
img <- array(NA, c(img_dims, length(copes)))
for(sid in (1:length(copes))){
img[,,,sid] <- copes[[sid]]
}
scores <- matrix(img, nrow=(91*109*91), ncol=length(copes))
mask_name <- system.file("extdata/AuditoryData", "mask.nii.gz", package="ARIpermutation")
mask <- RNifti::readNifti(mask_name)
mask_temp <- RNifti::readNifti("C:/Users/Angela Andreella/Documents/Thesis_Doc/Hyperaligment/Computation/AuditoryData/Pvalues/STG/mask_Superior_Temporal_Gyrus.nii.gz")
require(ARIpermutation)
require(vMFPmodel)
copes <- list()
sub_ids <- sapply(c(21:30),function(x) paste0(0,x))
for (sid in 1:length(sub_ids)) {
copes[[sid]] <- RNifti::readNifti(system.file("extdata/AuditoryData", paste0("/sub-", sub_ids[sid] , ".nii.gz"), package = "ARIpermutation"))
}
img_dims <- c(91, 109, 91)
img <- array(NA, c(img_dims, length(copes)))
for(sid in (1:length(copes))){
img[,,,sid] <- copes[[sid]]
}
scores <- matrix(img, nrow=(91*109*91), ncol=length(copes))
mask_name <- system.file("extdata/AuditoryData", "mask.nii.gz", package="ARIpermutation")
mask <- RNifti::readNifti(mask_name)
mask_temp <- RNifti::readNifti("C:/Users/Angela Andreella/Documents/Thesis_Doc/Hyperaligment/Computation/AuditoryData/Pvalues/STG/mask_Superior_Temporal_Gyrus.nii.gz")
mask_temp <- mask_temp[which(mask!=0)]
S <- which(mask_temp != 0)
dim(S)
S
STG <- RNifti::readNifti("C:/Users/Angela Andreella/Documents/Thesis_Doc/Hyperaligment/Computation/AuditoryData/Pvalues/STG/mask_Superior_Temporal_Gyrus.nii.gz")
dim(scores)
dim(img)
copes[[sid]] <- RNifti::readNifti("C:/Users/Angela Andreella/Documents/Thesis_Doc/Hyperaligment/Computation/AuditoryData/Data_preprocess_FSL/sub-021.feat.nii.gz")
dim(copes[[sid]])
copes <- list()
sub_ids <- sapply(c(21:30),function(x) paste0(0,x))
for (sid in 1:length(sub_ids)) {
copes[[sid]] <- RNifti::readNifti(paste0("C:/Users/Angela Andreella/Documents/Thesis_Doc/Hyperaligment/Computation/AuditoryData/Data_preprocess_FSL/sub-0", sid,".feat.nii.gz"))
}
copes <- list()
sub_ids <- sapply(c(21:30),function(x) paste0(0,x))
for (sid in 1:length(sub_ids)) {
copes[[sid]] <- RNifti::readNifti(paste0("C:/Users/Angela Andreella/Documents/Thesis_Doc/Hyperaligment/Computation/AuditoryData/Data_preprocess_FSL/sub-0", sub_ids[sid],".feat.nii.gz"))
}
copes <- list()
sub_ids <- sapply(c(21:30),function(x) paste0(0,x))
for (sid in 1:length(sub_ids)) {
copes[[sid]] <- RNifti::readNifti(paste0("C:/Users/Angela Andreella/Documents/Thesis_Doc/Hyperaligment/Computation/AuditoryData/Data_preprocess_FSL/sub-", sub_ids[sid],".feat.nii.gz"))
}
STG <- RNifti::readNifti("C:/Users/Angela Andreella/Documents/Thesis_Doc/Hyperaligment/Computation/AuditoryData/Pvalues/STG/mask_Superior_Temporal_Gyrus.nii.gz")
dim(copes)
dim(copes[[1]])
signTest
mask_STG <- RNifti::readNifti("C:/Users/Angela Andreella/Documents/Thesis_Doc/Hyperaligment/Computation/AuditoryData/Pvalues/STG/mask_Superior_Temporal_Gyrus.nii.gz")
copes <- list()
sub_ids <- sapply(c(21:30),function(x) paste0(0,x))
for (sid in 1:length(sub_ids)) {
wb <- RNifti::readNifti(paste0("C:/Users/Angela Andreella/Documents/Thesis_Doc/Hyperaligment/Computation/AuditoryData/Data_preprocess_FSL/sub-", sub_ids[sid],".feat.nii.gz"))
voxel <- dim(wb)[1] * dim(wb)[2] * dim(wb)[3]
tp <- dim(wb[4])
copes[[sid]] <- array(wb, dim = c(voxel, tp))[which(mask_STG==1),]
}
mask_STG
which(mask_STG==1)
wb
wb[which(mask_STG==1),]
dim(wb)
dim(copes[[sid]])
dim(copes[[1]])
copes
array(wb, dim = c(voxel, tp))
copes[[sid]] <- array(wb, dim = c(voxel, tp))
dim(copes)
dim(copes[[sid]])
tp
tp <- dim(wb)[4]
copes[[sid]] <- array(wb, dim = c(voxel, tp))[which(mask_STG==1),]
copes <- list()
sub_ids <- sapply(c(21:30),function(x) paste0(0,x))
for (sid in 1:length(sub_ids)) {
wb <- RNifti::readNifti(paste0("C:/Users/Angela Andreella/Documents/Thesis_Doc/Hyperaligment/Computation/AuditoryData/Data_preprocess_FSL/sub-", sub_ids[sid],".feat.nii.gz"))
voxel <- dim(wb)[1] * dim(wb)[2] * dim(wb)[3]
tp <- dim(wb)[4]
copes[[sid]] <- array(wb, dim = c(voxel, tp))[which(mask_STG==1),]
}
dim(copes[[1]])
mask_STG <- RNifti::readNifti("C:/Users/Angela Andreella/Documents/Thesis_Doc/Hyperaligment/Computation/AuditoryData/Pvalues/STG/mask_Superior_Temporal_Gyrus.nii.gz")
count(mask_STG==1)
mask_STG
mask_STG==1
sum(mask_STG==1)
img <- array(NA, c(sum(mask_STG==1), tp, length(copes)))
mask_STG <- RNifti::readNifti("C:/Users/Angela Andreella/Documents/Thesis_Doc/Hyperaligment/Computation/AuditoryData/Pvalues/STG/mask_Superior_Temporal_Gyrus.nii.gz")
img <- array(NA, c(sum(mask_STG==1), tp, length(copes)))
sub_ids <- sapply(c(21:30),function(x) paste0(0,x))
for (sid in 1:length(sub_ids)) {
wb <- RNifti::readNifti(paste0("C:/Users/Angela Andreella/Documents/Thesis_Doc/Hyperaligment/Computation/AuditoryData/Data_preprocess_FSL/sub-", sub_ids[sid],".feat.nii.gz"))
voxel <- dim(wb)[1] * dim(wb)[2] * dim(wb)[3]
tp <- dim(wb)[4]
img[,,sid] <- array(wb, dim = c(voxel, tp))[which(mask_STG==1),]
}
dim(img)
sid
wb <- RNifti::readNifti(paste0("C:/Users/Angela Andreella/Documents/Thesis_Doc/Hyperaligment/Computation/AuditoryData/Data_preprocess_FSL/sub-", sub_ids[sid],".feat.nii.gz"))
mask_STG <- RNifti::readNifti("C:/Users/Angela Andreella/Documents/Thesis_Doc/Hyperaligment/Computation/AuditoryData/Pvalues/STG/mask_Superior_Temporal_Gyrus.nii.gz")
sub_ids <- sapply(c(21:30),function(x) paste0(0,x))
img <- array(NA, c(sum(mask_STG==1), tp, length(sub_ids)))
voxel <- dim(wb)[1] * dim(wb)[2] * dim(wb)[3]
tp <- dim(wb)[4]
img[,,sid] <- array(wb, dim = c(voxel, tp))[which(mask_STG==1),]
mask_STG <- RNifti::readNifti("C:/Users/Angela Andreella/Documents/Thesis_Doc/Hyperaligment/Computation/AuditoryData/Pvalues/STG/mask_Superior_Temporal_Gyrus.nii.gz")
sub_ids <- sapply(c(21:30),function(x) paste0(0,x))
img <- array(NA, c(sum(mask_STG==1), tp, length(sub_ids)))
for (sid in 1:length(sub_ids)) {
wb <- RNifti::readNifti(paste0("C:/Users/Angela Andreella/Documents/Thesis_Doc/Hyperaligment/Computation/AuditoryData/Data_preprocess_FSL/sub-", sub_ids[sid],".feat.nii.gz"))
voxel <- dim(wb)[1] * dim(wb)[2] * dim(wb)[3]
tp <- dim(wb)[4]
img[,,sid] <- array(wb, dim = c(voxel, tp))[which(mask_STG==1),]
}
sid
dim(img)
dim(wb)
dim(wb)[4]
dim(mask_STG)[3]
dim(mask_STG)[4]
dim(mask_STG)
img <- array(NA, c(sum(mask_STG==1), 310, length(sub_ids)))
for (sid in 1:length(sub_ids)) {
wb <- RNifti::readNifti(paste0("C:/Users/Angela Andreella/Documents/Thesis_Doc/Hyperaligment/Computation/AuditoryData/Data_preprocess_FSL/sub-", sub_ids[sid],".feat.nii.gz"))
voxel <- dim(wb)[1] * dim(wb)[2] * dim(wb)[3]
tp <- dim(wb)[4]
img[,,sid] <- array(wb, dim = c(voxel, tp))[which(mask_STG==1),]
}
dim(img)
dim(array(wb, dim = c(voxel, tp))[which(mask_STG==1),])
dim(array(wb, dim = c(voxel, 310))[which(mask_STG==1),])
require(ARIpermutation)
require(vMFPmodel)
mask_STG <- RNifti::readNifti("C:/Users/Angela Andreella/Documents/Thesis_Doc/Hyperaligment/Computation/AuditoryData/Pvalues/STG/mask_Superior_Temporal_Gyrus.nii.gz")
sub_ids <- sapply(c(21:30),function(x) paste0(0,x))
img <- array(NA, c(sum(mask_STG==1), 310, length(sub_ids)))
for (sid in 1:length(sub_ids)) {
wb <- RNifti::readNifti(paste0("C:/Users/Angela Andreella/Documents/Thesis_Doc/Hyperaligment/Computation/AuditoryData/Data_preprocess_FSL/sub-", sub_ids[sid],".feat.nii.gz"))
voxel <- dim(wb)[1] * dim(wb)[2] * dim(wb)[3]
img[,,sid] <- array(wb, dim = c(voxel, 310))[which(mask_STG==1),]
}
data <- img
maxIt <- 2
t <- 5
k <- 1
Q <- NULL
ref_ds <- NULL
scaling <- TRUE
reflection <- TRUE
subj <- FALSE
out <-vMFPmodel(data, maxIt, t, k, Q, ref_ds, scaling, reflection, subj)
out
require(ARIpermutation)
require(vMFPmodel)
mask_STG <- RNifti::readNifti("C:/Users/Angela Andreella/Documents/Thesis_Doc/Hyperaligment/Computation/AuditoryData/Pvalues/STG/mask_Superior_Temporal_Gyrus.nii.gz")
sub_ids <- sapply(c(21:24),function(x) paste0(0,x))
img <- array(NA, c(sum(mask_STG==1), 310, length(sub_ids)))
for (sid in 1:length(sub_ids)) {
wb <- RNifti::readNifti(paste0("C:/Users/Angela Andreella/Documents/Thesis_Doc/Hyperaligment/Computation/AuditoryData/Data_preprocess_FSL/sub-", sub_ids[sid],".feat.nii.gz"))
voxel <- dim(wb)[1] * dim(wb)[2] * dim(wb)[3]
img[,,sid] <- array(wb, dim = c(voxel, 310))[which(mask_STG==1),]
}
data <- img
maxIt <- 2
t <- 5
k <- 1
Q <- NULL
ref_ds <- NULL
scaling <- TRUE
reflection <- TRUE
subj <- FALSE
out <-vMFPmodel(data, maxIt, t, k, Q, ref_ds, scaling, reflection, subj)
require(ARIpermutation)
require(vMFPmodel)
mask_STG <- RNifti::readNifti("C:/Users/Angela Andreella/Documents/Thesis_Doc/Hyperaligment/Computation/AuditoryData/Pvalues/STG/mask_Superior_Temporal_Gyrus.nii.gz")
sub_ids <- sapply(c(21:24),function(x) paste0(0,x))
img <- array(NA, c(sum(mask_STG==1), 310, length(sub_ids)))
for (sid in 1:length(sub_ids)) {
wb <- RNifti::readNifti(paste0("C:/Users/Angela Andreella/Documents/Thesis_Doc/Hyperaligment/Computation/AuditoryData/Data_preprocess_FSL/sub-", sub_ids[sid],".feat.nii.gz"))
voxel <- dim(wb)[1] * dim(wb)[2] * dim(wb)[3]
img[,,sid] <- array(wb, dim = c(voxel, 310))[which(mask_STG==1),]
}
data <- img
maxIt <- 2
t <- 5
k <- 1
Q <- NULL
ref_ds <- NULL
scaling <- TRUE
reflection <- TRUE
subj <- FALSE
out <-vMFPmodel(data, maxIt, t, k, Q, ref_ds, scaling, reflection, subj)
library(plyr)
data("ozone")
ozone
dim(ozone)
X <- matrix(rnorm(5*5),5,5)
library(Rcpp)
sourceCpp("src/svdC.cpp")
sourceCpp("src/svdC.cpp")
sourceCpp("src/svdC.cpp")
sourceCpp("src/svdC.cpp")
sourceCpp("src/svdC.cpp")
sourceCpp("src/svdC.cpp")
sourceCpp("src/svdC.cpp")
sourceCpp("src/svdC.cpp")
X <- matrix(rnorm(5*5),5,5)
out<- svdC(X)
svdC
sourceCpp("src/svdC.cpp")
sourceCpp("src/svdC.cpp")
sourceCpp("src/svdC.cpp")
sourceCpp("src/svdC.cpp")
sourceCpp("src/svdC.cpp")
require(ARIpermutation)
require(vMFPmodel)
mask_STG <- RNifti::readNifti("C:/Users/Angela Andreella/Documents/Thesis_Doc/Hyperaligment/Computation/AuditoryData/Pvalues/STG/mask_Superior_Temporal_Gyrus.nii.gz")
sub_ids <- sapply(c(21:24),function(x) paste0(0,x))
img <- array(NA, c(sum(mask_STG==1), 310, length(sub_ids)))
for (sid in 1:length(sub_ids)) {
wb <- RNifti::readNifti(paste0("C:/Users/Angela Andreella/Documents/Thesis_Doc/Hyperaligment/Computation/AuditoryData/Data_preprocess_FSL/sub-", sub_ids[sid],".feat.nii.gz"))
voxel <- dim(wb)[1] * dim(wb)[2] * dim(wb)[3]
img[,,sid] <- array(wb, dim = c(voxel, 310))[which(mask_STG==1),]
}
data <- img
maxIt <- 2
t <- 5
k <- 1
Q <- NULL
ref_ds <- NULL
scaling <- TRUE
reflection <- TRUE
subj <- FALSE
out <-vMFPmodel(data, maxIt, t, k, Q, ref_ds, scaling, reflection, subj)
gc()

#require(devtools)
#devtools::install_github("angeella/ARIpermutation")
#setwd("C:/Users/coshk/Desktop/Perm_project/fMRI_auditory")


# get statmap and mask ---------------------------------

require(ARIpermutation)
copes <- list()
sub_ids <- sapply(c(21:40),function(x) paste0(0,x))
for (sid in 1:length(sub_ids)) {  
  copes[[sid]] <- RNifti::readNifti(system.file("extdata/AuditoryData", paste0("/sub-", sub_ids[sid] , ".nii.gz"), package = "ARIpermutation"))
  
}

img_dims <- c(91, 109, 91)
img <- array(NA, c(img_dims, length(copes)))
for(sid in (1:length(copes))){
  img[,,,sid] <- copes[[sid]]
}

scores <- matrix(img, nrow=(91*109*91), ncol=length(copes))
mask_name <- system.file("extdata/AuditoryData", "mask.nii.gz", package="ARIpermutation")
mask <- RNifti::readNifti(mask_name)



# superior temporal gyrus (to select the subset) ---------------------------------
mask_temp <- RNifti::readNifti("mask_Superior_Temporal_Gyrus.nii")
mask_temp <- mask_temp[which(mask!=0)]
S <- which(mask_temp != 0)



# get matrix of pvalues ---------------------------------
B <- 999
st <- signTest(X=scores, B, alternative="two.sided", mask=mask_name)
pvs <- c(st$pv,st$pv_H0)
pmat <- matrix(pvs, nrow=B+1) # B+1=1000 rows, 168211 columns



# test ---------------------------------
alpha <- 0.1
time1 <- system.time(c <- ctrp_set(pmat, higher=F))[3]
time2 <- system.time(te <- ctrp_test(S, c$D, c$R, c$I, alpha, n_max=0, from_low=T, first_rem=T))[3]
time3 <- system.time(cb <- ctrp_bounds(S, c$D, c$R, c$I, alpha))[3]
times <- list("set"=time1, "test"=time2, "bounds"=time3)
save(te, cb, times, file = "STG_test.RData")
load( "STG_test.RData")

